import { getFen } from './game.js?v=1752586932';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è Lichess API
const SKILL_LEVELS = {
    1: { depth: 1, multiPv: 1 },   // 3-–π —Ä–∞–∑—Ä—è–¥
    2: { depth: 2, multiPv: 1 },
    3: { depth: 3, multiPv: 1 },
    4: { depth: 4, multiPv: 1 },   // 2-–π —Ä–∞–∑—Ä—è–¥
    5: { depth: 5, multiPv: 1 },
    6: { depth: 6, multiPv: 1 },
    7: { depth: 7, multiPv: 1 },   // 1-–π —Ä–∞–∑—Ä—è–¥
    8: { depth: 8, multiPv: 1 },
    9: { depth: 9, multiPv: 1 },
    10: { depth: 10, multiPv: 1 },
    11: { depth: 11, multiPv: 1 }, // –ö–ú–°
    12: { depth: 12, multiPv: 1 },
    13: { depth: 13, multiPv: 1 },
    14: { depth: 14, multiPv: 1 }, // –ú–∞—Å—Ç–µ—Ä
    15: { depth: 15, multiPv: 1 },
    16: { depth: 16, multiPv: 1 },
    17: { depth: 17, multiPv: 1 }, // –ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä
    18: { depth: 18, multiPv: 1 },
    19: { depth: 19, multiPv: 1 },
    20: { depth: 20, multiPv: 1 }
};

export async function getComputerMove(fen, skillLevel = 10, board = null) {
    console.log("ü§ñ –ó–ê–ü–†–û–° –•–û–î–ê –û–¢ –ö–û–ú–ü–¨–Æ–¢–ï–†–ê");
    console.log("üìä –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", skillLevel);
    console.log("üéØ FEN –ø–æ–∑–∏—Ü–∏—è:", fen);
    
    try {
        const settings = SKILL_LEVELS[skillLevel] || SKILL_LEVELS[10];
        console.log("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Lichess API:", settings);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Lichess Cloud Evaluation API
        const response = await fetch(`https://lichess.org/api/cloud-eval?fen=${encodeURIComponent(fen)}`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        console.log("üåê –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Lichess:", response.status);
        
        if (response.ok) {
            const data = await response.json();
            console.log("üì® –û—Ç–≤–µ—Ç Lichess:", data);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if (data && data.pvs && data.pvs.length > 0) {
                // –í—ã–±–∏—Ä–∞–µ–º —Ö–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                let selectedPv;
                
                if (skillLevel <= 5) {
                    // –î–ª—è –Ω–∏–∑–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π –∏–Ω–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ–º –Ω–µ –ª—É—á—à–∏–π —Ö–æ–¥
                    const randomFactor = Math.random();
                    if (randomFactor < 0.3 && data.pvs.length > 1) {
                        selectedPv = data.pvs[1]; // –í—Ç–æ—Ä–æ–π –ª—É—á—à–∏–π —Ö–æ–¥
                    } else {
                        selectedPv = data.pvs[0]; // –õ—É—á—à–∏–π —Ö–æ–¥
                    }
                } else if (skillLevel <= 10) {
                    // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å - –∏–Ω–æ–≥–¥–∞ –Ω–µ –ª—É—á—à–∏–π —Ö–æ–¥
                    const randomFactor = Math.random();
                    if (randomFactor < 0.15 && data.pvs.length > 1) {
                        selectedPv = data.pvs[1];
                    } else {
                        selectedPv = data.pvs[0];
                    }
                } else {
                    // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å - –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –ª—É—á—à–∏–π —Ö–æ–¥
                    selectedPv = data.pvs[0];
                }
                
                const bestMove = selectedPv.moves.split(' ')[0];
                console.log("üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ö–æ–¥:", bestMove);
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
                const from = bestMove.substring(0, 2);
                const to = bestMove.substring(2, 4);
                
                const fromCol = from.charCodeAt(0) - 'a'.charCodeAt(0);
                const fromRow = 8 - parseInt(from[1]);
                const toCol = to.charCodeAt(0) - 'a'.charCodeAt(0);
                const toRow = 8 - parseInt(to[1]);
                
                const move = { fromRow, fromCol, toRow, toCol };
                console.log("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–æ–¥:", move);
                
                return move;
            } else {
                console.log("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ cloud database");
            }
        } else {
            console.error("‚ùå –û—à–∏–±–∫–∞ Lichess API:", response.status);
            if (response.status === 404) {
                console.log("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ cloud database");
            }
        }
        
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Lichess:", error);
    }
    
    // Fallback - –ù–ï –î–ï–õ–ê–ï–ú –°–õ–£–ß–ê–ô–ù–´–ô –•–û–î!
    // –õ—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å null, —á—Ç–æ–±—ã game.js –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π AI
    console.log("‚ö†Ô∏è Lichess API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ AI");
    return null;
}

